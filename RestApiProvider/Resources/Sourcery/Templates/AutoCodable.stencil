import Foundation
import Domain

// MARK: - AutoCodable

{% for model in types.based.AutoCodable %}
extension {{model.name}}: Codable {
{% if model.storedVariables %}
    public enum CodingKeys: String, CodingKey {
{% for variable in model.storedVariables %}
{% if variable.annotations.ignore == nil %}
    case {{variable.name}} {% if variable.annotations.key %}= "{{variable.annotations.key}}" {% endif %}
{% endif %}
{% endfor %}
    }
{% endif %}

    public func encode(to encoder: Encoder) throws {
{% if model.storedVariables %}
        var container = encoder.container(keyedBy: CodingKeys.self)
{% for variable in model.storedVariables %}
{% if variable.annotations.ignore == nil %}
{% if variable.annotations.transformer %}
{% if variable.isOptional %}
        try container.encodeIfPresent({{variable.name}}, forKey: .{{variable.name}}, transformer: {{variable.annotations.transformer}}())
{% else %}
        try container.encode({{variable.name}}, forKey: .{{variable.name}}, transformer: {{variable.annotations.transformer}}())
{% endif %}
{% else %}
        try container.encode({{variable.name}}, forKey: .{{variable.name}})
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
    }

    public init(from decoder: Decoder) throws {
{% if model.storedVariables %}
        let values = try decoder.container(keyedBy: CodingKeys.self)
    {% for variable in model.storedVariables %}
        {% if variable.annotations.ignore == nil %}
            {% if variable.annotations.transformer %}
        //swiftlint:disable:next force_cast
                {% if variable.isOptional %}
        {{variable.name}} = try values.decodeIfPresent(.{{variable.name}}, transformer: {{variable.annotations.transformer}}()){% if variable.annotations.forceDecode %}!{% endif %}
                {% else %}
        {{variable.name}} = try values.decode(.{{variable.name}}, transformer: {{variable.annotations.transformer}}())
                {% endif %}
            {% else %}
                {% if variable.isOptional %}
        {{variable.name}} = try values.decodeIfPresent({{variable.typeName | replace:"?",""}}.self, forKey: .{{variable.name}})
                {% else %}
        {{variable.name}} = try values.decode({{variable.typeName}}.self, forKey: .{{variable.name}})
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endif %}
    }
}
{% endfor %}
